"""
Django settings for PortfolioSite project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os, sys
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print('base_dir', BASE_DIR)

load_dotenv(os.path.join(BASE_DIR.parent, '.env'))

ROOT_URL = os.getenv('ROOT_URL','http://localhost:8000')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

env = os.getenv('DJANGO_ENV', 'dev')
# SECURITY WARNING: don't run with debug turned on in production!

if env == 'dev':
    DEBUG = True
elif env == 'prod':
    DEBUG = False
else:
    raise ValueError("Invalid Django Environment")

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "localhost").split(" ")

SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS',60))

SESSION_COOKIE_SECURE = True if os.getenv('SESSION_COOKIE_SECURE', 'False') == 'True' else False

CSRF_COOKIE_SECURE = True if os.getenv('CSRF_COOKIE_SECURE', 'False') == 'True' else False

SECURE_SSL_REDIRECT = True if os.getenv('SECURE_SSL_REDIRECT', 'False') == 'True' else False

SECURE_HSTS_PRELOAD = True if os.getenv('SECURE_HSTS_PRELOAD', 'False') == 'True' else False

SECURE_HSTS_INCLUDE_SUBDOMAINS = True if os.getenv('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'False') == 'True' else False

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'anymail',
    'Main',
    'tinymce',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'PortfolioSite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'Main.context_processors.global_processor',
            ],
        },
    },
]

WSGI_APPLICATION = os.getenv('WSGI_APPLICATION','PortfolioSite.wsgi.application')


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if env == 'dev':
    print('USING LOCAL SQLITE TEST DB')
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    print(F'USING DB: {os.getenv("DB_SERVICE")}')
    DATABASES = {
        'default': {
            'ENGINE': os.getenv('DB_ENGINE'),
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASS'),
            'HOST': os.getenv('DB_SERVICE'),   
            'PORT': int(os.getenv('DB_PORT', 3306)),
            'sql_mode': 'STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO',
            'default-character-set': 'utf8'
        }
    }



# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = os.getenv('STATIC_URL','static/')
STATIC_ROOT = os.getenv('STATIC_ROOT')
MEDIA_URL = os.getenv('MEDIA_URL','media/')

if not 'test' in sys.argv:
    MEDIA_ROOT = os.getenv('MEDIA_ROOT',os.path.join(BASE_DIR,'media'))
else:
    MEDIA_ROOT = os.getenv('MEDIA_ROOT',os.path.join(BASE_DIR,'test_media'))

STATICFILES_DIRS = [
    os.getenv('STATICFILES_DIR',os.path.join(BASE_DIR, 'static')),
    ]
# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


## Email Backend

EMAIL_BACKEND = "anymail.backends.mailjet.EmailBackend"

# Forwarding address for contact form
EMAIL_CONTACT_FROM_ADDRESS = os.getenv('EMAIL_CONTACT_FROM_ADDRESS',None)
EMAIL_CONTACT_TO_ADDRESS = os.getenv('EMAIL_CONTACT_TO_ADDRESS',None)
if any([EMAIL_CONTACT_FROM_ADDRESS is None,EMAIL_CONTACT_TO_ADDRESS is None]):
    raise ValueError('email contact form address required')

ANYMAIL = {
    "MAILJET_API_KEY": os.getenv('MAILJET_API_KEY', None),
    "MAILJET_SECRET_KEY": os.getenv('MAILJET_SECRET_KEY', None),
}

## Logging

handlers = []
LOG_FULL_PATH = os.path.join(BASE_DIR, 'log.log')
if os.getenv('CONSOLE_LOGGING', True) == 'True':
    handlers.append('console')
if os.getenv('FILE_LOGGING', False) == 'True':
    handlers.append('file')
if os.getenv('ADMIN_MAIL_LOGGING', False) == 'True':
    handlers.append('mail_admins')
    ADMINS=[
        ('Leif Kjos', 'leif.kjos@movingxp.com'),
        ('Tech NJ Error Notification', 'tech@movingxp.com')
    ]


    LOG_DIRECTORY = os.path.dirname(os.getenv('LOG_DIRECTORY', os.path.join(BASE_DIR, 'log'))) 
    LOG_FILENAME = os.getenv('LOG_FILENAME', 'info-log.log')

    if not os.path.exists(LOG_DIRECTORY):
        print('created log directory:', LOG_DIRECTORY)
        os.mkdir(LOG_DIRECTORY)
    
    LOG_FULL_PATH = os.path.join(LOG_DIRECTORY,LOG_FILENAME)
    print('logging info to:', str(LOG_FULL_PATH))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(name)-12s %(levelname)-8s %(message)s'
        },
        'file': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
        'file': {
            'level': os.getenv('LOG_LEVEL', 'INFO'),
            'class': 'logging.handlers.RotatingFileHandler',
            'backupCount': 10, # keep at most 10 log files
            'maxBytes': 5242880, # 5*1024*1024 bytes (5MB)
            'formatter': 'file',
            'filename': LOG_FULL_PATH,
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
    },
    'loggers': {
        '': {
            'level': os.getenv('LOG_LEVEL', 'INFO'),
            'handlers': handlers,
        }
    }
}

## Tiny MCE

TINYMCE_SPELLCHECKER = True

TINYMCE_DEFAULT_CONFIG = {
    "height": "500px",
    "width": "auto",
    "menubar": "file edit view insert format tools table help",
    "plugins": "advlist autolink lists link image charmap print preview anchor searchreplace visualblocks code "
    "fullscreen insertdatetime media table paste code help wordcount spellchecker",
    "toolbar": "undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft "
    "aligncenter alignright alignjustify | outdent indent |  numlist bullist checklist | forecolor "
    "backcolor casechange permanentpen formatpainter removeformat | pagebreak | charmap emoticons | "
    "fullscreen  preview save print | insertfile image media pageembed template link anchor codesample | "
    "a11ycheck ltr rtl | showcomments addcomment code",
    "custom_undo_redo_levels": 10,
}